// Code generated by MockGen. DO NOT EDIT.
// Source: db/sqlc/querier.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	db "github.com/9bany/task/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateKey mocks base method.
func (m *MockQuerier) CreateKey(ctx context.Context, key string) (db.Keys, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", ctx, key)
	ret0, _ := ret[0].(db.Keys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKey indicates an expected call of CreateKey.
func (mr *MockQuerierMockRecorder) CreateKey(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockQuerier)(nil).CreateKey), ctx, key)
}

// CreateSite mocks base method.
func (m *MockQuerier) CreateSite(ctx context.Context, arg db.CreateSiteParams) (db.Sites, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSite", ctx, arg)
	ret0, _ := ret[0].(db.Sites)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSite indicates an expected call of CreateSite.
func (mr *MockQuerierMockRecorder) CreateSite(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSite", reflect.TypeOf((*MockQuerier)(nil).CreateSite), ctx, arg)
}

// GetRandomKey mocks base method.
func (m *MockQuerier) GetRandomKey(ctx context.Context) (db.Keys, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomKey", ctx)
	ret0, _ := ret[0].(db.Keys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomKey indicates an expected call of GetRandomKey.
func (mr *MockQuerierMockRecorder) GetRandomKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomKey", reflect.TypeOf((*MockQuerier)(nil).GetRandomKey), ctx)
}

// GetSiteByURL mocks base method.
func (m *MockQuerier) GetSiteByURL(ctx context.Context, url string) (db.Sites, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteByURL", ctx, url)
	ret0, _ := ret[0].(db.Sites)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteByURL indicates an expected call of GetSiteByURL.
func (mr *MockQuerierMockRecorder) GetSiteByURL(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteByURL", reflect.TypeOf((*MockQuerier)(nil).GetSiteByURL), ctx, url)
}

// IncreaseKeyUsageCount mocks base method.
func (m *MockQuerier) IncreaseKeyUsageCount(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseKeyUsageCount", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseKeyUsageCount indicates an expected call of IncreaseKeyUsageCount.
func (mr *MockQuerierMockRecorder) IncreaseKeyUsageCount(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseKeyUsageCount", reflect.TypeOf((*MockQuerier)(nil).IncreaseKeyUsageCount), ctx, id)
}
