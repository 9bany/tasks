// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: keys.sql

package db

import (
	"context"
)

const createKey = `-- name: CreateKey :one
INSERT INTO keys (
  key
) VALUES (
  $1
)
RETURNING id, key, usage_count, created_at
`

func (q *Queries) CreateKey(ctx context.Context, key string) (Keys, error) {
	row := q.db.QueryRowContext(ctx, createKey, key)
	var i Keys
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.UsageCount,
		&i.CreatedAt,
	)
	return i, err
}

const getKey = `-- name: GetKey :one
SELECT id, key, usage_count, created_at FROM keys
WHERE key = $1
`

func (q *Queries) GetKey(ctx context.Context, key string) (Keys, error) {
	row := q.db.QueryRowContext(ctx, getKey, key)
	var i Keys
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.UsageCount,
		&i.CreatedAt,
	)
	return i, err
}

const getRandomKey = `-- name: GetRandomKey :one
SELECT id, key, usage_count, created_at FROM keys
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetRandomKey(ctx context.Context) (Keys, error) {
	row := q.db.QueryRowContext(ctx, getRandomKey)
	var i Keys
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.UsageCount,
		&i.CreatedAt,
	)
	return i, err
}

const increaseKeyUsageCount = `-- name: IncreaseKeyUsageCount :exec
UPDATE keys 
SET usage_count = usage_count + 1
WHERE id = $1
`

func (q *Queries) IncreaseKeyUsageCount(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, increaseKeyUsageCount, id)
	return err
}
